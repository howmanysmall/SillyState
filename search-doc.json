[{"title":"Getting Started with SillyState","type":0,"sectionRef":"#","url":"/SillyState/docs/intro","content":"Getting Started with SillyState Here are some quick links to get started using SillyState: Installation guideAPI Docs","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/SillyState/docs/installation","content":"","keywords":""},{"title":"Method 1 - Wally​","type":1,"pageTitle":"Installation","url":"/SillyState/docs/installation#method-1---wally","content":"Setup Wally by using wally init.Add howmanysmall/sillystate as a dependency. [dependencies] SillyState = &quot;howmanysmall/sillystate@^1.0.0&quot;  "},{"title":"Method #2 - HttpService​","type":1,"pageTitle":"Installation","url":"/SillyState/docs/installation#method-2---httpservice","content":"This method uses HttpService to install SillyState. In Roblox Studio, paste the following command into your command bar.Run the following command: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local HttpService = game:GetService(&quot;HttpService&quot;) local HttpEnabled = HttpService.HttpEnabled local REPOSITORY_NAME = &quot;SillyState&quot; HttpService.HttpEnabled = true local function RequestAsync(RequestDictionary) return HttpService:RequestAsync(RequestDictionary) end local function GetAsync(Url, Headers) Headers[&quot;cache-control&quot;] = &quot;no-cache&quot; local Success, ResponseDictionary = pcall(RequestAsync, { Headers = Headers; Method = &quot;GET&quot;; Url = Url; }) if Success then if ResponseDictionary.Success then return ResponseDictionary.Body else return false, string.format(&quot;HTTP %*: %*&quot;, ResponseDictionary.StatusCode, ResponseDictionary.StatusMessage) end else return false, ResponseDictionary end end local function Initify(Root) local InitFile = Root:FindFirstChild(&quot;init&quot;) or Root:FindFirstChild(&quot;init.lua&quot;) or Root:FindFirstChild(&quot;init.client.lua&quot;) or Root:FindFirstChild(&quot;init.server.lua&quot;) if InitFile then InitFile.Name = Root.Name InitFile.Parent = Root.Parent for _, Child in Root:GetChildren() do Child.Parent = InitFile end Root:Destroy() Root = InitFile end for _, Child in Root:GetChildren() do Initify(Child) end return Root end local FilesList = HttpService:JSONDecode(assert(GetAsync( string.format(&quot;https://api.github.com/repos/howmanysmall/%*/contents/src&quot;, REPOSITORY_NAME), {accept = &quot;application/vnd.github.v3+json&quot;} ))) local Package = Instance.new(&quot;Folder&quot;) Package.Name = REPOSITORY_NAME for _, FileData in FilesList do local ModuleScript = Instance.new(&quot;ModuleScript&quot;) ModuleScript.Name = tostring(string.match(FileData.name, &quot;(%w+)%.lua&quot;)) local Success, Source = GetAsync(FileData.download_url, {}) if not Success then ModuleScript.Source = string.format(&quot;--[===[%*]===]&quot;, tostring(Source)) else ModuleScript.Source = tostring(Success) end ModuleScript.Parent = Package end Package.Parent = ReplicatedStorage Initify(Package) HttpService.HttpEnabled = HttpEnabled "},{"title":"Next​","type":1,"pageTitle":"Installation","url":"/SillyState/docs/installation#next","content":"Now, check out the API reference! "},{"title":"SillyState","type":0,"sectionRef":"#","url":"/SillyState/api/SillyState","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SillyState","url":"/SillyState/api/SillyState#functions","content":" "},{"title":"new​","type":1,"pageTitle":"SillyState","url":"/SillyState/api/SillyState#new","content":"&lt;/&gt; SillyState.new( Defaults: T,-- The default state. This must be a table. ValidationFunction?: (Value: T) → ( boolean, string? )-- A t-like validation function. Used in assert. ) → SillyState&lt;T&gt; Creates a new SillyState object.  "},{"title":"Is​","type":1,"pageTitle":"SillyState","url":"/SillyState/api/SillyState#Is","content":"&lt;/&gt; SillyState.Is( Value: any-- The value you are checking. ) → boolean-- True iff the value is a SillyState. Used to validate if the Value is a SillyState.  "},{"title":"Copy​","type":1,"pageTitle":"SillyState","url":"/SillyState/api/SillyState#Copy","content":"&lt;/&gt; SillyState:Copy() → T-- The frozen deep copy of the state. Creates a frozen deep copy of the state.  "},{"title":"Get​","type":1,"pageTitle":"SillyState","url":"/SillyState/api/SillyState#Get","content":"&lt;/&gt; SillyState:Get( Key: string-- The key to get the value from. ) → unknown Gets the value at the given key in the state table.  "},{"title":"Set​","type":1,"pageTitle":"SillyState","url":"/SillyState/api/SillyState#Set","content":"&lt;/&gt; SillyState:Set( Key: string,-- The key to get the value from. Value: unknown-- The value you are setting with. ) → () Sets the value to the given key in the state table.  "},{"title":"Destroy​","type":1,"pageTitle":"SillyState","url":"/SillyState/api/SillyState#Destroy","content":"&lt;/&gt; SillyState:Destroy() → () Used to cleanup the SillyState object. "}]